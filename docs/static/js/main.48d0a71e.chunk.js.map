{"version":3,"sources":["Nav.js","tower.PNG","Banner.js","Header.js","Footer.js","Table.js","HomeStats.js","SetupForm.js","Modal.js","GameSetup.js","JengaModal.js","QuitModal.js","GameClock.js","MoveClock.js","TotalClock.js","Game.js","Gameplay.js","Results.js","PostGame.js","App.js","reportWebVitals.js","index.js"],"names":["Nav","props","className","to","Banner","src","jenga","alt","Header","att","h4textcol","atts","h4text","moveButton","jengaButton","quitButton","Footer","Table","gamesPlayed","useState","sortedPlayerStats","setSortedPlayerStats","useEffect","playerStats","playerName","map","game","defaultStats","wins","loses","maxHeight","winStreak","winnerName","winnerPlayer","name","loserName","loserPlayer","winnerStats","loserStats","towerHeight","stats","winPercentage","toFixed","sorted","Object","entries","sort","a","b","element","index","HomeStats","SetupForm","addPlayer","handleChecked","players","setPlayerName","placeholder","id","type","value","onChange","e","target","onClick","action","player","checked","Modal","size","aria-labelledby","centered","closeButton","Title","Body","Button","onHide","GameSetup","setPlayers","history","useHistory","modalShow","setModalShow","handleStart","numChecked","push","show","concat","newPlayers","slice","JengaModal","player1","player2","onWinnerClick","rest","removedFromCol","setRemovedFromCol","removedFromRow","setRemovedFromRow","replacedOnRow","setReplacedOnRow","replacedOnCol","setReplacedOnCol","handleWinnerClick","winner","loser","onQuit","GameClock","setTime","moment","utc","Date","now","format","gameTime","setGameTime","timer","start","setInterval","delta","date","timeString","clearInterval","MoveClock","setTimeElapsed","resetTimerTrigger","moveTime","setMoveTime","startDate","timeElapsedDate","TotalClock","AddTimeSeconds","totalPlayerTime","setTotalPlayerTime","subtract","Game","setGame","setGamesPlayed","jengaModalShow","setJengaModalShow","quitModalShow","setQuitModalShow","setTowerHeight","fullRow","setFullRow","blocksReplaced","setBlocksReplaced","setPlayer1","setPlayer2","currentPlayer","setCurrentPlayer","useRef","moveTimeElapsed","moveTimerReset","setMoveTimerReset","player1TotalTime","player2TotalTime","currentPlayerTotalTimeSeconds","setCurrentPlayerTotalTimeSeconds","checkedPlayers","filter","moveHandler","moves","removeFrom","parseInt","replacedOn","current","jengaHandler","quitHandler","jengaStats","finalGame","player1time","player2time","removedFrom","QuitModal","time","seconds","Gameplay","length","Results","numMovesPlayer1","move","numMovesPlayer2","classNames","PostGame","App","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.48d0a71e.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport './materialize.css';\r\nimport './App.css';\r\n\r\nconst Nav = (props) => {\r\n  \r\n  return (\r\n      <div className=\"\">\r\n      <div className=\" row nav blue darken-1\">\r\n        <h6 className=\"col s3 center nav-h6 home-stats-link\">\r\n           <Link to='/' className=\"nav-links\">Home Stats</Link>   \r\n         </h6>\r\n         <h6 className=\"col s3 nav-h6 game-setup-link\">\r\n           <Link to='/gameSetup' className=\"nav-links\">Game Setup</Link>   \r\n         </h6>\r\n         <h6 className=\"col s3 nav-h6 game-play-link\">\r\n           <Link to='/gameplay' className=\"nav-links\">Game Play</Link>   \r\n         </h6>\r\n         <h6 className=\"col s3 nav-h6 post-game-link\">\r\n           <Link to='/postGame' className=\"nav-links\">Post Game</Link>   \r\n         </h6>\r\n      </div>\r\n      </div>\r\n  )    \r\n}\r\n\r\nexport default Nav;","export default __webpack_public_path__ + \"static/media/tower.25c97ff7.PNG\";","import React from 'react';\r\nimport jenga from './tower.PNG';\r\n\r\nconst Banner = () => {\r\n  \r\n  return (\r\n    <div className=\"row deep-orange darken-1 banner valign-wrapper\">\r\n      <img src={jenga} alt=\"jenga\" className=\"col s5 m3 banner-towers tower1 p-0\" />\r\n      <h1 className=\"col s7 m6 white-text banner-text\">Jenga <br/> Companion</h1>\r\n      <img src={jenga} alt=\"jenga\" className=\"col m3 banner-towers p-0 tower2\" />\r\n    </div>\r\n  )    \r\n}\r\n\r\nexport default Banner;","import React from 'react';\r\nimport './App.css';\r\n\r\nconst Header = (props) => {\r\n  \r\n  return (\r\n    <div className={`row blue darken-1 header mbp valign-wrapper ${props.att}`}>\r\n      <h5 className={`${props.h4textcol} header-text ${props.atts}`}>{props.h4text}</h5>\r\n      {props.moveButton}\r\n      {props.jengaButton}\r\n      {props.quitButton}\r\n    </div>\r\n  )    \r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport './App.css';\r\n\r\nconst Footer = (props) => {\r\n  \r\n  return (\r\n    <div className={`row blue darken-1 footer mbp valign-wrapper ${props.att}`}>\r\n      <h5 className={`${props.h4textcol} footer-text ${props.atts}`}>{props.h4text}</h5>\r\n      {props.moveButton}\r\n      {props.jengaButton}\r\n      {props.quitButton}\r\n    </div>\r\n  )    \r\n}\r\n\r\nexport default Footer;","import React from \"react\";\r\nimport \"./materialize.css\";\r\nimport \"./App.css\";\r\nimport { useState, useEffect } from \"react\";\r\n\r\nconst Table = ({ gamesPlayed }) => {\r\n  const [sortedPlayerStats, setSortedPlayerStats] = useState([]);\r\n\r\n  useEffect(() => {\r\n    let playerStats = {}; // => { \"mike\" => {wins: 1, loses: 2}, \"tom\" => {} }\r\n\r\n    // fill in playerStats by looping through all games...\r\n    gamesPlayed.map((game) => {\r\n\r\n      const defaultStats = {\r\n        wins: 0, loses: 0, maxHeight: 0, winStreak: 0\r\n      };\r\n      \r\n      let winnerName = game.winnerPlayer.name;\r\n      let loserName = game.loserPlayer.name;\r\n\r\n      // create stats object for winner and loser if they don't exist\r\n      if (!playerStats[winnerName]) {\r\n        playerStats[winnerName] = {...defaultStats};\r\n      }\r\n      if (!playerStats[loserName]) {\r\n        playerStats[loserName] = {...defaultStats};\r\n      }\r\n\r\n      let winnerStats = playerStats[winnerName];\r\n      let loserStats = playerStats[loserName];\r\n\r\n      // add win to winner's player stats and loss to loser's stats\r\n      winnerStats.wins += 1;\r\n      loserStats.loses += 1;\r\n\r\n      // update maxHeight\r\n      if (winnerStats.maxHeight < game.towerHeight) {\r\n        winnerStats.maxHeight = game.towerHeight;\r\n      }\r\n      if (loserStats.maxHeight < game.towerHeight) {\r\n        loserStats.maxHeight = game.towerHeight;\r\n      }\r\n\r\n      // update win streak\r\n      winnerStats.winStreak++;\r\n      loserStats.winStreak = 0;\r\n    });\r\n\r\n    // calculate win percentage for each player\r\n    for (var playerName in playerStats) {\r\n      let stats = playerStats[playerName];\r\n      stats.winPercentage = stats.wins / (stats.loses + stats.wins) * 100;\r\n      stats.winPercentage = stats.winPercentage.toFixed(2);\r\n    }\r\n\r\n    let sorted = Object.entries(playerStats).sort((a, b) => {\r\n      // a=> [\"mike\", {...}]; b => [\"tom\", {...}]\r\n      return b[1].wins - a[1].wins;\r\n    });\r\n\r\n    setSortedPlayerStats(sorted);\r\n  }, [gamesPlayed]);\r\n\r\n  return (\r\n    <table className=\"leaderboard\">\r\n      <thead>\r\n        <tr className=\"head-txt\">\r\n          <th className=\"ranking\">Ranking</th>\r\n          <th className=\"player\">Player</th>\r\n          <th>Wins</th>\r\n          <th>Loses</th>\r\n          <th>Win %</th>\r\n          <th>Max Height</th>\r\n          <th>Win Streak</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody className=\"tbody-txt\">\r\n        {sortedPlayerStats.map((element, index) => (\r\n          <tr key={index}>\r\n            <td>{index + 1}</td>\r\n            <td>{element[0]}</td>\r\n            <td>{element[1].wins}</td>\r\n            <td>{element[1].loses}</td>\r\n            <td>{element[1].winPercentage}%</td>\r\n            <td>{element[1].maxHeight}</td>\r\n            <td>{element[1].winStreak}</td>\r\n          </tr>\r\n        ))}\r\n      </tbody>\r\n    </table>\r\n  );\r\n};\r\n\r\nexport default Table;\r\n","import React from 'react';\r\nimport Header from './Header';\r\nimport Footer from './Footer';\r\nimport Table from './Table';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst HomeStats = ({ gamesPlayed }) => {\r\n\r\n  return (\r\n    <>\r\n      <Header \r\n        h4text=\"Leaderboard\" \r\n        h4textcol=\"col s6 m9\" \r\n        atts=\"head-text\" \r\n        moveButton={\r\n          <Link \r\n            to=\"/gameSetup\" \r\n            className={\r\n              `waves-effect waves-light btn-large col s6 m3 valign-wrapper purple lighten-1 buttons`\r\n            }\r\n          >\r\n            PLAY JENGA!\r\n          </Link>\r\n        } \r\n      />\r\n\r\n      <Table gamesPlayed={gamesPlayed} className=\"container\"/>\r\n\r\n      <Footer \r\n        h4text=\"Ready to Start?\" \r\n        h4textcol=\"col s8 m9\" \r\n        att=\"mt-0\" \r\n        atts=\"ready\" \r\n        moveButton={\r\n          <Link\r\n            to=\"/gameSetup\" \r\n            className={\r\n              `waves-effect waves-light btn-large col s4 m3 valign-wrapper purple lighten-1 buttons`\r\n            }\r\n          >\r\n            <i className=\"material-icons play\">\r\n              play_arrow\r\n            </i>\r\n          </Link>\r\n        }\r\n      />\r\n    </>\r\n  )    \r\n}\r\n\r\nexport default HomeStats;","import React from 'react';\r\nimport { useState } from 'react';\r\nimport './materialize.css';\r\nimport './App.css';\r\n\r\nconst SetupForm = ({ addPlayer, handleChecked, players }) => {\r\n\r\n  const [playerName, setPlayerName] = useState('');\r\n  \r\n  return (\r\n\r\n    <div className=\"gameSetup\">\r\n\r\n      <div className=\"row\">\r\n        <h4 className=\"left-align add-player-txt\">\r\n          Add a Player:\r\n        </h4>\r\n      </div>\r\n\r\n      <div className=\"\">\r\n        <form className=\"\">\r\n          <div className=\"row name-input\">\r\n            <input \r\n              placeholder=\"Player Name\" \r\n              id=\"first_name\" \r\n              type=\"text\" \r\n              className=\"col s5 m4 l3 offset-s1 offset-m2 offset-l3 validate\"\r\n              value={playerName}\r\n              onChange={\r\n                e => setPlayerName(e.target.value)\r\n              }\r\n            />\r\n            <a \r\n              className=\"col s5 m4 l3 offset-m1 waves-effect waves-light btn blue-buttons add-player-btn\"\r\n              onClick={\r\n                () => {\r\n                  addPlayer(playerName); \r\n                  setPlayerName('');\r\n                }\r\n              }\r\n            >\r\n              Add Player\r\n            </a>\r\n          </div>\r\n        </form>\r\n      </div>\r\n\r\n      <div className=\"row\">\r\n        <h4 className=\"left-align choose\">\r\n          Choose Players:\r\n        </h4>\r\n      </div>\r\n\r\n      <form action=\"\">\r\n        <div className=\"row checks\">\r\n\r\n          <div className=\"col s4 m4 column1\">\r\n\r\n            {\r\n              players.map(\r\n                (player, index) => (\r\n\r\n                  <p key={index} className=\"\">\r\n                    <label>\r\n                      <input \r\n                        checked={player.checked} \r\n                        type=\"checkbox\" \r\n                        onChange={\r\n                          (e) => handleChecked(\r\n                            index, \r\n                            e.target.checked\r\n                          )\r\n                        }\r\n                      />\r\n                      <span \r\n                        className=\"\"\r\n                      >\r\n                        {player.name}\r\n                      </span>\r\n                    </label>\r\n                  </p>\r\n\r\n                )\r\n              )\r\n            }\r\n            \r\n          </div>\r\n\r\n          <div className=\"col s4 m4 column2\">\r\n           \r\n          </div>\r\n\r\n          <div className=\"col s4 m4 column3\">\r\n            \r\n          </div>\r\n\r\n        </div>\r\n      </form>\r\n    </div>\r\n  )    \r\n}\r\n\r\nexport default SetupForm;","import react from 'react';\r\nimport BModal from 'react-bootstrap/Modal';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nfunction Modal(props) {\r\n    return (\r\n      <BModal\r\n        {...props}\r\n        size=\"lg\"\r\n        aria-labelledby=\"contained-modal-title-vcenter\"\r\n        centered\r\n      >\r\n        <BModal.Header closeButton>\r\n          <BModal.Title id=\"contained-modal-title-vcenter\">\r\n            Whoa there cowpoke...\r\n          </BModal.Title>\r\n        </BModal.Header>\r\n        <BModal.Body>\r\n          <p>\r\n            Please select at least 2 players to start a game.\r\n          </p>\r\n        </BModal.Body>\r\n        <BModal.Footer>\r\n          <Button onClick={props.onHide}>Close</Button>\r\n        </BModal.Footer>\r\n      </BModal>\r\n    );\r\n  }\r\n\r\n  export default Modal;","import React from 'react';\r\nimport Header from './Header';\r\nimport Footer from './Footer';\r\nimport SetupForm from './SetupForm';\r\nimport './App.css';\r\nimport Modal from './Modal';\r\nimport { useState } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nconst GameSetup = ({ players, setPlayers }) => {\r\n\r\n  const history = useHistory();\r\n\r\n  const [modalShow, setModalShow] = useState(false);\r\n  const [formIsValid, setFormIsValid] = useState(false);\r\n\r\n  //Handles the add player event upon add player button click\r\n  const addPlayer = (playerName) => {\r\n    setPlayers(\r\n      players.concat({\r\n        name: playerName, \r\n        checked: false\r\n      })\r\n    );\r\n  };\r\n\r\n  //Handles the checkbox event in the choose player form\r\n  const handleChecked = (index, checked) => {\r\n    let newPlayers = players.slice();\r\n    newPlayers[index].checked=checked;\r\n    setPlayers(newPlayers);\r\n  };\r\n\r\n  //Handles the click event that starts the game\r\n  const handleStart = () => {\r\n    let numChecked = 0;\r\n\r\n    players.map(\r\n      player => player.checked && numChecked++\r\n    );\r\n\r\n    if (numChecked < 2) {\r\n      setModalShow(true);\r\n    } else {\r\n      history.push('/gameplay');\r\n    };\r\n  };\r\n\r\n  return (\r\n\r\n    <>\r\n      <Header \r\n        h4text=\"Game Setup\" \r\n        h4textcol=\"col s6 m9\" \r\n        atts=\"lb-pad head-text\" \r\n        moveButton={\r\n          <a \r\n            className={\r\n              `waves-effect waves-light btn-large col s6 m3 offset-s3-m5 valign-wrapper purple lighten-1 buttons`\r\n            } \r\n            onClick={\r\n              handleStart\r\n            }\r\n          >\r\n            START GAME\r\n            <i className=\"large material-icons\"></i>\r\n          </a>\r\n        }\r\n      />\r\n\r\n      <Modal \r\n        show={modalShow} \r\n        onHide={\r\n          () => setModalShow(false)\r\n        } \r\n      />\r\n\r\n      <SetupForm \r\n        addPlayer={addPlayer} \r\n        handleChecked={handleChecked} \r\n        players={players}\r\n      />\r\n\r\n      <Footer \r\n        h4text=\"Prepare to Jenga!\" \r\n        h4textcol=\"col s8 m9\" \r\n        atts=\"prepare\" \r\n        moveButton={\r\n          <a \r\n            className={\r\n              `waves-effect waves-light btn-large col s4 m3 valign-wrapper purple lighten-1 buttons`\r\n            } \r\n            onClick={\r\n              handleStart\r\n            }\r\n          >\r\n            <i className=\"material-icons play\">\r\n              play_arrow\r\n            </i>\r\n          </a>\r\n        } \r\n      />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default GameSetup;","import react from \"react\";\r\nimport BModal from \"react-bootstrap/Modal\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport { useState } from \"react\";\r\n\r\nfunction JengaModal({ player1, player2, onHide, onWinnerClick, ...rest }) {\r\n  const [removedFromCol, setRemovedFromCol] = useState(\"\");\r\n  const [removedFromRow, setRemovedFromRow] = useState(\"\");\r\n  const [replacedOnRow, setReplacedOnRow] = useState(\"\");\r\n  const [replacedOnCol, setReplacedOnCol] = useState(\"\");\r\n\r\n  const handleWinnerClick = (winner, loser) => {\r\n    onWinnerClick({\r\n      winner,\r\n      loser,\r\n      removedFromCol,\r\n      removedFromRow,\r\n      replacedOnCol,\r\n      replacedOnRow\r\n    });\r\n  };\r\n\r\n  return (\r\n    <BModal\r\n      {...rest}\r\n      size=\"lg\"\r\n      aria-labelledby=\"contained-modal-title-vcenter\"\r\n      centered\r\n    >\r\n      <BModal.Header closeButton>\r\n        <BModal.Title id=\"contained-modal-title-vcenter\">\r\n          Whoe caused the jenga?!\r\n        </BModal.Title>\r\n      </BModal.Header>\r\n      <BModal.Body>\r\n        <div className=\"row center\">\r\n          <h5 className=\"col s4 offset-s1 from-on\">Removed From:</h5>\r\n          <h5 className=\"col s4 offset-s2 from-on\">Replaced On:</h5>\r\n        </div>\r\n\r\n        <div className=\"row center\">\r\n          <div className=\"col s3 rc\">\r\n            <h6 className=\"row-label1\">Row:</h6>\r\n            <input\r\n              placeholder=\"00\"\r\n              id=\"first_name\"\r\n              type=\"text\"\r\n              className=\"center validate in\"\r\n              value={removedFromRow}\r\n              onChange={(e) => setRemovedFromRow(e.target.value)}\r\n            />\r\n          </div>\r\n\r\n          <div className=\"col s3 rc\">\r\n            <h6 className=\"col-label1\">Column:</h6>\r\n            <input\r\n              placeholder=\"00\"\r\n              id=\"first_name\"\r\n              type=\"text\"\r\n              className=\"center validate in\"\r\n              value={removedFromCol}\r\n              onChange={(e) => setRemovedFromCol(e.target.value)}\r\n            />\r\n          </div>\r\n\r\n          <div className=\"col s3 rc\">\r\n            <h6 className=\"row-label2\">Row:</h6>\r\n            <input\r\n              placeholder=\"00\"\r\n              id=\"first_name\"\r\n              type=\"text\"\r\n              className=\"validate in center\"\r\n              value={replacedOnRow}\r\n              onChange={(e) => setReplacedOnRow(e.target.value)}\r\n            />\r\n          </div>\r\n\r\n          <div className=\"col s3 rc\">\r\n            <h6 className=\"col-label2\">Column:</h6>\r\n            <input\r\n              placeholder=\"00\"\r\n              id=\"first_name\"\r\n              type=\"text\"\r\n              className=\"validate in center\"\r\n              value={replacedOnCol}\r\n              onChange={(e) => setReplacedOnCol(e.target.value)}\r\n            />\r\n          </div>\r\n        </div>\r\n        <p>Please select the culprit.</p>\r\n\r\n        <Button onClick={(e) => handleWinnerClick(player2, player1)}>\r\n          {player1.name}\r\n        </Button>\r\n        <Button onClick={(e) => handleWinnerClick(player1, player2)}>\r\n          {player2.name}\r\n        </Button>\r\n      </BModal.Body>\r\n      <BModal.Footer>\r\n        <Button onClick={onHide}>Go Back</Button>\r\n      </BModal.Footer>\r\n    </BModal>\r\n  );\r\n}\r\n\r\nexport default JengaModal;\r\n","import react from 'react';\r\nimport BModal from 'react-bootstrap/Modal';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nfunction Modal(props) {\r\n    return (\r\n      <BModal\r\n        {...props}\r\n        size=\"lg\"\r\n        aria-labelledby=\"contained-modal-title-vcenter\"\r\n        centered\r\n      >\r\n        <BModal.Header closeButton>\r\n          <BModal.Title id=\"contained-modal-title-vcenter\">\r\n            Whoa there cowpoke...\r\n          </BModal.Title>\r\n        </BModal.Header>\r\n        <BModal.Body>\r\n          <p>\r\n            Are you sure you want to quit the game?\r\n          </p>\r\n        </BModal.Body>\r\n        <BModal.Footer>\r\n          <Button onClick={props.onQuit}>Yes</Button>\r\n          <Button onClick={props.onHide}>No</Button>\r\n        </BModal.Footer>\r\n      </BModal>\r\n    );\r\n  }\r\n\r\n  export default Modal;","import React from 'react';\r\nimport {useState, useEffect} from 'react';\r\nimport moment from 'moment';\r\n\r\nfunction GameClock ({ setTime }) {\r\n\r\n  // start gameTime at 00:00:00\r\n  const [gameTime, setGameTime] = useState(moment.utc(Date.now()).format('HH:mm:ss'));\r\n  let timer = null;\r\n\r\n  useEffect(\r\n    () => {\r\n\r\n      var start = Date.now(); // create start time when component loads\r\n\r\n      timer = setInterval(\r\n        () => {\r\n          var delta = Date.now() - start; // milliseconds elapsed since start time\r\n          var date = new Date(delta); // create date for elapsed time\r\n          var timeString = moment.utc(date).format('HH:mm:ss'); // convert date to string\r\n          setGameTime(timeString);\r\n          setTime(timeString);\r\n        }, 1000 // update about every second\r\n      );\r\n\r\n      return () => {\r\n        clearInterval(timer);\r\n      }\r\n    },\r\n  []);\r\n  \r\n  return (\r\n    <>\r\n      {gameTime}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default GameClock;","import React from \"react\";\r\nimport { useState, useEffect } from \"react\";\r\nimport moment from \"moment\";\r\n\r\nfunction MoveClock({ setTimeElapsed, resetTimerTrigger }) {\r\n  // start gameTime at 00:00:00\r\n  const [moveTime, setMoveTime] = useState(\r\n    moment.utc(Date.now()).format(\"HH:mm:ss\")\r\n  );\r\n  let timer = null;\r\n\r\n  useEffect(() => {\r\n    // create start Date from start time seconds\r\n    var startDate = Date.now();\r\n\r\n    timer = setInterval(\r\n      () => {\r\n        var delta = Date.now() - startDate; // milliseconds elapsed since start time\r\n        var timeElapsedDate = new Date(delta); // create date for elapsed time\r\n        var timeString = moment.utc(timeElapsedDate).format(\"HH:mm:ss\"); // convert date to string\r\n        setMoveTime(timeString);\r\n\r\n        setTimeElapsed(delta / 1000); // update seconds elapsed\r\n      },\r\n      1000 // update about every second\r\n    );\r\n\r\n    return () => {\r\n      clearInterval(timer);\r\n    };\r\n  }, [resetTimerTrigger]);\r\n\r\n  return <>{moveTime}</>;\r\n}\r\n\r\nexport default MoveClock;\r\n","import React from \"react\";\r\nimport { useState, useEffect } from \"react\";\r\nimport moment from \"moment\";\r\n\r\nfunction TotalClock({ AddTimeSeconds, resetTimerTrigger }) {\r\n  const [totalPlayerTime, setTotalPlayerTime] = useState(\r\n    moment.utc(Date.now()).format(\"HH:mm:ss\")\r\n  );\r\n  let timer = null;\r\n\r\n  useEffect(() => {\r\n    var startDate = moment(Date.now()).subtract(AddTimeSeconds, \"seconds\");\r\n    timer = setInterval(\r\n      () => {\r\n        var delta = Date.now() - startDate; // milliseconds elapsed since start\r\n        var date = new Date(delta);\r\n        setTotalPlayerTime(moment.utc(date).format(\"HH:mm:ss\"));\r\n      },\r\n      1000 // update about every second\r\n    );\r\n\r\n    return () => {\r\n      clearInterval(timer);\r\n    };\r\n  }, [resetTimerTrigger]);\r\n\r\n  return <>{totalPlayerTime}</>;\r\n}\r\n\r\nexport default TotalClock;\r\n","import { React, useState, useRef, useEffect } from \"react\";\r\nimport JengaModal from \"./JengaModal\";\r\nimport QuitModal from './QuitModal';\r\nimport GameClock from \"./GameClock\";\r\nimport MoveClock from \"./MoveClock\";\r\nimport TotalClock from \"./TotalClock\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst Game = ({ players, game, setGame, gamesPlayed, setGamesPlayed }) => {\r\n  const history = useHistory();\r\n\r\n  // modals\r\n  const [jengaModalShow, setJengaModalShow] = useState(false);\r\n  const [quitModalShow, setQuitModalShow] = useState(false);\r\n\r\n  // inputs\r\n  const [removedFromRow, setRemovedFromRow] = useState(\"\");\r\n  const [removedFromCol, setRemovedFromCol] = useState(\"\");\r\n  const [replacedOnRow, setReplacedOnRow] = useState(\"\");\r\n  const [replacedOnCol, setReplacedOnCol] = useState(\"\");\r\n  const [towerHeight, setTowerHeight] = useState(18);\r\n  const [fullRow, setFullRow] = useState(1);\r\n  const [blocksReplaced, setBlocksReplaced] = useState(0);\r\n\r\n  // players\r\n  const [player1, setPlayer1] = useState({});\r\n  const [player2, setPlayer2] = useState({});\r\n  const [currentPlayer, setCurrentPlayer] = useState({});\r\n\r\n  // game timer\r\n  const gameTime = useRef(\"\");\r\n\r\n  // move timer\r\n  const moveTimeElapsed = useRef(0);\r\n  const [moveTimerReset, setMoveTimerReset] = useState(null);\r\n\r\n  // total timer\r\n  const player1TotalTime = useRef(0);\r\n  const player2TotalTime = useRef(0);\r\n  const [currentPlayerTotalTimeSeconds, setCurrentPlayerTotalTimeSeconds] = useState(0);\r\n\r\n  useEffect(() => {\r\n    const checkedPlayers = players.filter(player => player.checked);\r\n    setPlayer1(checkedPlayers[0]);\r\n    setPlayer2(checkedPlayers[1]);\r\n    setCurrentPlayer(checkedPlayers[0]);\r\n  }, [players]);\r\n\r\n  //Handles the move event on click of move button\r\n  const moveHandler = () => {\r\n    setGame({\r\n      ...game,\r\n      moves: [\r\n        ...game.moves,\r\n        {\r\n          player: currentPlayer,\r\n          removeFrom: [parseInt(removedFromRow), parseInt(removedFromCol)],\r\n          replacedOn: [parseInt(replacedOnRow), parseInt(replacedOnCol)],\r\n        },\r\n      ],\r\n    });\r\n\r\n    // reset removeFrom fields\r\n    setRemovedFromRow(\"\");\r\n    setRemovedFromCol(\"\");\r\n\r\n    // reset replacedOn fields\r\n    setReplacedOnRow(\"\");\r\n    setReplacedOnCol(\"\");\r\n\r\n    // increment height of tower\r\n    setFullRow(fullRow + 1);\r\n    if (fullRow % 3 == 0) {\r\n      setTowerHeight(towerHeight + 1);\r\n    }\r\n\r\n    // increment blocks replaced\r\n    setBlocksReplaced(blocksReplaced + 1);\r\n      \r\n    // add move time to playerTotalTime for current player\r\n    if (currentPlayer == player1){\r\n      player1TotalTime.current += moveTimeElapsed.current;\r\n    } else {\r\n      player2TotalTime.current += moveTimeElapsed.current;\r\n    }\r\n\r\n    // switch player and update total time\r\n    if (currentPlayer === player1) {\r\n      setCurrentPlayer(player2);\r\n      setCurrentPlayerTotalTimeSeconds(player2TotalTime.current);\r\n    } else {\r\n      setCurrentPlayer(player1);\r\n      setCurrentPlayerTotalTimeSeconds(player1TotalTime.current);\r\n    }\r\n\r\n    // reset move time\r\n    setMoveTimerReset(Date.now());\r\n\r\n    \r\n    if (currentPlayer === player1) {\r\n      \r\n    } else {\r\n      setCurrentPlayer(player1);\r\n    }\r\n  };\r\n\r\n  // Handles the Jenga event on click of the Jenga button\r\n  const jengaHandler = () => {\r\n    setJengaModalShow(true);\r\n  };\r\n\r\n  const quitHandler = () => {\r\n    setQuitModalShow(true);\r\n  };\r\n\r\n  const onWinnerClick = (jengaStats) => {\r\n    let finalGame = {\r\n      ...game,\r\n      gameTime: gameTime.current,\r\n      player1time: player1TotalTime.current,\r\n      player2time: player2TotalTime.current,\r\n      towerHeight: towerHeight,\r\n      winnerPlayer: jengaStats.winner,\r\n      loserPlayer: jengaStats.loser,\r\n      jenga: {\r\n        removedFrom: [jengaStats.removedFromCol, jengaStats.removedFromRow],\r\n        replacedOn: [jengaStats.removedFromCol, jengaStats.removedFromRow]\r\n      }\r\n    }\r\n    setGame(finalGame);\r\n    setGamesPlayed([...gamesPlayed, finalGame]);\r\n\r\n    history.push(\"/postGame\");\r\n  };\r\n\r\n  const setGameTime = (time) => {\r\n    gameTime.current = time;\r\n  };\r\n\r\n  const setMoveTimeElapsed = (seconds) => {\r\n    moveTimeElapsed.current = seconds;\r\n  }\r\n\r\n  //Handles the quit event on click of the Quit button\r\n  const onQuit = () => {\r\n    history.push('/');\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <JengaModal\r\n        show={jengaModalShow}\r\n        onHide={() => setJengaModalShow(false)}\r\n        player1={player1}\r\n        player2={player2}\r\n        onWinnerClick={onWinnerClick}\r\n      />\r\n      <QuitModal\r\n        show={quitModalShow}\r\n        onHide={() => setQuitModalShow(false)}\r\n        onQuit={onQuit}\r\n      />\r\n      <div className={`row blue darken-1 header mbp valign-wrapper game-head`}>\r\n        <h5 className={`col s3 m3 header-text game-pad htext-hide`}>\r\n          Gameplay\r\n        </h5>\r\n\r\n        <button\r\n          className={`waves-effect waves-light btn-large col s4 sm4 m3 valign-wrapper light-blue lighten-1 ml-0 blue-buttons`}\r\n          onClick={moveHandler}\r\n        >\r\n          MOVE\r\n          <i className=\"large material-icons\"></i>\r\n        </button>\r\n\r\n        <button\r\n          className={`waves-effect waves-light btn-large col s4 sm4 m3 valign-wrapper deep-orange buttons`}\r\n          onClick={jengaHandler}\r\n        >\r\n          JENGA!\r\n          <i className=\"large material-icons\"></i>\r\n        </button>\r\n\r\n        <button\r\n          className={`waves-effect waves-light btn-large col s4 sm4 m3 valign-wrapper purple lighten-1 buttons`}\r\n          onClick={quitHandler}\r\n        >\r\n          QUIT\r\n          <i className=\"large material-icons\"></i>\r\n        </button>\r\n      </div>\r\n\r\n      <div className=\"row marquis-mt\">\r\n        <div className=\"col s5 m5 names\">\r\n          <div className=\"card-panel light-blue lighten-1 blue-buttons center names2\">\r\n            <h4 className=\"white-text names3\">{player1.name}</h4>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"col s2 m2 names\">\r\n          <div className=\"card-panel blue darken-1 center names2\">\r\n            <h4 className=\"white-text names3\">VS</h4>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"col s5 m5 names\">\r\n          <div className=\"card-panel light-blue lighten-1 blue-buttons center names2\">\r\n            <h4 className=\"white-text names3\">{player2.name}</h4>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div>\r\n        <form>\r\n          <h3 className=\"center turn\">{currentPlayer.name}'s Turn</h3>\r\n          <div className=\"row center\">\r\n            <h5 className=\"col s4 offset-s1 from-on\">Removed From:</h5>\r\n            <h5 className=\"col s4 offset-s2 from-on\">Replaced On:</h5>\r\n          </div>\r\n\r\n          <div className=\"row center\">\r\n            <div className=\"col s3 rc\">\r\n              <h6 className=\"row-label1\">Row:</h6>\r\n              <input\r\n                placeholder=\"00\"\r\n                id=\"first_name\"\r\n                type=\"text\"\r\n                className=\"center validate in\"\r\n                value={removedFromRow}\r\n                onChange={(e) => setRemovedFromRow(e.target.value)}\r\n              />\r\n            </div>\r\n\r\n            <div className=\"col s3 rc\">\r\n              <h6 className=\"col-label1\">Column:</h6>\r\n              <input\r\n                placeholder=\"00\"\r\n                id=\"first_name\"\r\n                type=\"text\"\r\n                className=\"center validate in\"\r\n                value={removedFromCol}\r\n                onChange={(e) => setRemovedFromCol(e.target.value)}\r\n              />\r\n            </div>\r\n\r\n            <div className=\"col s3 rc\">\r\n              <h6 className=\"row-label2\">Row:</h6>\r\n              <input\r\n                placeholder=\"00\"\r\n                id=\"first_name\"\r\n                type=\"text\"\r\n                className=\"validate in center\"\r\n                value={replacedOnRow}\r\n                onChange={(e) => setReplacedOnRow(e.target.value)}\r\n              />\r\n            </div>\r\n\r\n            <div className=\"col s3 rc\">\r\n              <h6 className=\"col-label2\">Column:</h6>\r\n              <input\r\n                placeholder=\"00\"\r\n                id=\"first_name\"\r\n                type=\"text\"\r\n                className=\"validate in center\"\r\n                value={replacedOnCol}\r\n                onChange={(e) => setReplacedOnCol(e.target.value)}\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"row\">\r\n            <div className=\"col s6 center\">\r\n              <h5>Height of Tower:</h5>\r\n              <h4 className=\"numbers\">Row: {towerHeight}</h4>\r\n            </div>\r\n            <div className=\"col s6 center\">\r\n              <h5>Blocks Replaced:</h5>\r\n              <h4 className=\"numbers\">{blocksReplaced}</h4>\r\n            </div>\r\n          </div>\r\n        </form>\r\n      </div>\r\n\r\n      <div className=\"row center mt-half\">\r\n        <div className=\"col s12 m4 p-0 center\">\r\n          <div className=\"clocks card-panel light-blue lighten-1 center\">\r\n            <h5 className=\"clock\">Game Clock</h5>\r\n            <h3 className=\"white-text center time\">\r\n              <GameClock setTime={setGameTime}/>\r\n            </h3>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"col s12 m4 p-0 center\">\r\n          <div className=\"clocks card-panel blue darken-1 center\">\r\n            <h5 className=\"clock\">Move Timer</h5>\r\n            <h3 className=\"white-text time\">\r\n              <MoveClock setTimeElapsed={setMoveTimeElapsed} resetTimerTrigger={moveTimerReset}/>\r\n            </h3>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"col s12 m4 p-0 center\">\r\n          <div className=\"clocks card-panel light-blue lighten-1 center\">\r\n            <h5 className=\"clock\">Total Time</h5>\r\n            <h3 className=\"white-text time\">\r\n              <TotalClock resetTimerTrigger={moveTimerReset} AddTimeSeconds={currentPlayerTotalTimeSeconds}/>\r\n            </h3>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div className={`row blue darken-1 footer mbp valign-wrapper game-head`}>\r\n        <h5 className={`\"col s3 m3 footer-text htext-hide game-pad`}>\r\n          Gameplay\r\n        </h5>\r\n        <button\r\n          className={`waves-effect waves-light btn-large col s4 sm4 m3 valign-wrapper light-blue lighten-1 ml-0 blue-buttons`}\r\n          onClick={moveHandler}\r\n        >\r\n          MOVE\r\n          <i className=\"large material-icons\"></i>\r\n        </button>\r\n        <button\r\n          className={`waves-effect waves-light btn-large col s4 sm4 m3 valign-wrapper deep-orange buttons`}\r\n          onClick={jengaHandler}\r\n        >\r\n          JENGA!\r\n          <i className=\"large material-icons\"></i>\r\n        </button>\r\n        <button\r\n          className={`waves-effect waves-light btn-large col s4 sm4 m3 valign-wrapper purple lighten-1 buttons`}\r\n          onClick={quitHandler}\r\n        >\r\n          QUIT\r\n          <i className=\"large material-icons\"></i>\r\n        </button>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Game;\r\n","import React from 'react';\r\nimport Game from './Game';\r\n\r\nconst Gameplay = (props) => {\r\n\r\n  return (\r\n\r\n    <>\r\n      {\r\n        props.players.length >= 2\r\n        && \r\n        <Game {...props}\r\n        />\r\n      }\r\n\r\n      {\r\n        props.players.length < 2 \r\n        && \r\n        <h2>You need to set up the game...</h2>\r\n      }\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Gameplay;","import React from 'react';\r\n\r\nconst Results = ({ players, game }) => {\r\n  let { \r\n    moves, \r\n    gameTime, \r\n    towerHeight, \r\n    winnerPlayer, \r\n    loserPlayer, \r\n    jenga\r\n  } = game;\r\n\r\n  let numMovesPlayer1 = 0;\r\n  moves.map(\r\n    move => move.player.name === players[0].name && numMovesPlayer1++\r\n  );\r\n\r\n  let numMovesPlayer2 = 0;\r\n  moves.map(\r\n    move => move.player.name === players[1].name && numMovesPlayer2++\r\n  );\r\n\r\n  return (\r\n\r\n    <div className=\"\">\r\n\r\n      <div className=\"results card-panel light-blue lighten-1 center\">\r\n        <h3 className=\"white-text results\">\r\n          Winner! {winnerPlayer.name}\r\n        </h3>\r\n      </div>\r\n\r\n      <div classNames=\"row\">\r\n        <h4 className=\"col s12 indi-stats\">\r\n          {winnerPlayer.name}'s Stats\r\n        </h4>\r\n      </div>\r\n\r\n      <table className=\"\">\r\n        <tbody>\r\n          <tr className=\"post-text\">\r\n            <td className=\"post-stats\">\r\n              Player Time : 00:00:18\r\n            </td>\r\n          </tr>\r\n          <tr className=\"post-text\">\r\n            <td className=\"post-stats\">\r\n              Number of Moves: {numMovesPlayer1}\r\n            </td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n  \r\n      <div className=\"results2 p-2 card-panel purple lighten-1 center\">\r\n        <h3 className=\"white-text results mt-0\">\r\n          Loser! {loserPlayer.name}\r\n        </h3>\r\n      </div>\r\n\r\n      <div className=\"row\">\r\n        <h4 className=\"col s12 indi-stats\">\r\n          {loserPlayer.name}'s Stats\r\n        </h4>\r\n      </div>\r\n\r\n      <table className=\"\">\r\n        <tbody>\r\n          <tr className=\"post-text\">\r\n            <td className=\"post-stats\">\r\n              Player Time : 00:00:22\r\n            </td>\r\n          </tr>\r\n          <tr className=\"post-text\">\r\n            <td className=\"post-stats\">\r\n              Number of Moves: {numMovesPlayer2}\r\n            </td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n  \r\n      <div className=\"results2 p-2 card-panel deep-orange darken-1 center\">\r\n        <h3 className=\"results white-text mt-0\">\r\n          JENGA!\r\n        </h3>\r\n      </div>\r\n  \r\n      <div className=\"row\">\r\n        <h4 className=\"col s12 indi-stats\">\r\n          Game Stats\r\n        </h4>\r\n      </div>\r\n  \r\n      <table className=\"\">\r\n        <tbody>\r\n          <tr className=\"post-text\">\r\n            <td className=\"post-stats\">\r\n              Game Time: {gameTime}\r\n            </td>\r\n          </tr>\r\n          <tr className=\"post-text\">\r\n            <td className=\"post-stats\">\r\n              Total Moves: {moves.length}\r\n            </td>\r\n          </tr>\r\n          <tr className=\"post-text\">\r\n            <td className=\"post-stats\">\r\n              Max Tower Height: {towerHeight}\r\n            </td>\r\n          </tr>\r\n          <tr className=\"post-text\">\r\n            <td className=\"post-stats\">\r\n              JENGA Caused By: {loserPlayer.name}\r\n            </td>\r\n          </tr>\r\n          <tr className=\"post-text\">\r\n            <td className=\"post-stats\">\r\n              Jenga Pulled From: Col {jenga.removedFrom[0]} Row {jenga.removedFrom[1]}\r\n            </td>\r\n          </tr>\r\n          <tr className=\"post-text\">\r\n            <td className=\"post-stats\">\r\n              Attempted: Row Col {jenga.replacedOn[0]} Row {jenga.replacedOn[1]}\r\n            </td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  )    \r\n}\r\n\r\nexport default Results;","import React from \"react\";\r\nimport Header from \"./Header\";\r\nimport Footer from \"./Footer\";\r\nimport Results from \"./Results\";\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst PostGame = ({ players, game }) => {\r\n  return (\r\n    <>\r\n      <Header\r\n        h4text=\"Post Game\"\r\n        h4textcol=\"col s6 m6\"\r\n        atts=\"lb-pad head-text\"\r\n        moveButton={\r\n          <Link\r\n            to=\"/gameSetup\"\r\n            className={`waves-effect waves-light btn-large col s4 m3 valign-wrapper buttons deep-orange darken-1 rematch-btn`}\r\n          >\r\n            Rematch\r\n            <i className=\"material-icons\"></i>\r\n          </Link>\r\n        }\r\n        quitButton={\r\n          <Link\r\n            to=\"/\"\r\n            className={`waves-effect waves-light btn-large col s4 m3 valign-wrapper buttons purple lighten-1 rematch-btn`}\r\n          >\r\n            QUIT\r\n            <i className=\"material-icons\"></i>\r\n          </Link>\r\n        }\r\n      />\r\n\r\n      {\r\n        game.moves.length > 0 \r\n        && \r\n        <Results \r\n          players={players} \r\n          game={game} \r\n        />\r\n      }\r\n\r\n      <Footer\r\n        h4text=\"Rematch?\"\r\n        h4textcol=\"col s6 m6\"\r\n        atts=\"rematch\"\r\n        att=\"mt-0\"\r\n        moveButton={\r\n          <Link\r\n            to=\"/gameplay\"\r\n            className={`waves-effect waves-light btn-large col s4 m3 valign-wrapper buttons deep-orange darken-1 rematch-btn`}\r\n          >\r\n            Rematch\r\n            <i className=\"material-icons\"></i>\r\n          </Link>\r\n        }\r\n        quitButton={\r\n          <Link\r\n            to=\"/\"\r\n            className={`waves-effect waves-light btn-large col s4 m3 valign-wrapper buttons purple lighten-1 rematch-btn`}\r\n          >\r\n            QUIT\r\n            <i className=\"material-icons\"></i>\r\n          </Link>\r\n        }\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PostGame;\r\n","import { React, useState } from \"react\";\r\nimport Nav from \"./Nav\";\r\nimport Banner from \"./Banner\";\r\nimport HomeStats from \"./HomeStats\";\r\nimport GameSetup from \"./GameSetup\";\r\nimport Gameplay from \"./Gameplay\";\r\nimport PostGame from \"./PostGame\";\r\nimport { Route } from \"react-router-dom\";\r\nimport \"./materialize.css\";\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n  const [gamesPlayed, setGamesPlayed] = useState([]);\r\n  const [players, setPlayers] = useState([]);\r\n  const [game, setGame] = useState({\r\n    moves: [],\r\n    towerHeight: 18,\r\n    gameTime: null,\r\n    winnerPlayer: null,\r\n    loserPlayer: null,\r\n  });\r\n\r\n\r\n  return (\r\n    <div className=\"jenga container\">\r\n      <Nav />\r\n      <Banner />\r\n      <Route exact path=\"/\">\r\n        <HomeStats gamesPlayed={gamesPlayed} />\r\n      </Route>\r\n      <Route exact path=\"/gameSetup\">\r\n        <GameSetup players={players} setPlayers={setPlayers} />\r\n      </Route>\r\n      <Route exact path=\"/gameplay\">\r\n        <Gameplay\r\n          game={game}\r\n          setGame={setGame}\r\n          gamesPlayed={gamesPlayed}\r\n          setGamesPlayed={setGamesPlayed}\r\n          players={players}\r\n        />\r\n      </Route>\r\n      <Route exact path=\"/postGame\">\r\n        <PostGame game={game} players={players} />\r\n      </Route>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {BrowserRouter} from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n    <BrowserRouter>\r\n      <App />\r\n    </BrowserRouter>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}